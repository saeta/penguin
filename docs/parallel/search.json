{"Structs/InlineComputeThreadPool.html#/s:15PenguinParallel23InlineComputeThreadPoolVACycfc":{"name":"init()","abstract":"<p>Initializes <code>self</code>.</p>","parent_name":"InlineComputeThreadPool"},"Structs/InlineComputeThreadPool.html#/s:15PenguinParallel23InlineComputeThreadPoolV14maxParallelismSivp":{"name":"maxParallelism","abstract":"<p>The maximum number of concurrent threads of execution supported by this thread pool.</p>","parent_name":"InlineComputeThreadPool"},"Structs/InlineComputeThreadPool.html#/s:15PenguinParallel23InlineComputeThreadPoolV07currentE5IndexSiSgvp":{"name":"currentThreadIndex","abstract":"<p>The index of the current thread.</p>","parent_name":"InlineComputeThreadPool"},"Structs/InlineComputeThreadPool.html#/s:15PenguinParallel23InlineComputeThreadPoolV8dispatchyyyyXEF":{"name":"dispatch(_:)","abstract":"<p>Dispatch <code>fn</code> to be run at some point in the future (immediately).</p>","parent_name":"InlineComputeThreadPool"},"Structs/InlineComputeThreadPool.html#/s:15PenguinParallel23InlineComputeThreadPoolV4joinyyyyXE_yyXEtF":{"name":"join(_:_:)","abstract":"<p>Executes <code>a</code> and <code>b</code> optionally in parallel, and returns when both are complete.</p>","parent_name":"InlineComputeThreadPool"},"Structs/InlineComputeThreadPool.html#/s:15PenguinParallel23InlineComputeThreadPoolV4joinyyyyKXE_yyKXEtKF":{"name":"join(_:_:)","abstract":"<p>Executes <code>a</code> and <code>b</code> optionally in parallel, and returns when both are complete.</p>","parent_name":"InlineComputeThreadPool"},"Structs/InlineComputeThreadPool.html#/s:15PenguinParallel17ComputeThreadPoolP11parallelFor1n_ySi_ySi_S2itXEtF":{"name":"parallelFor(n:_:)","parent_name":"InlineComputeThreadPool"},"Structs/InlineComputeThreadPool.html#/s:15PenguinParallel17ComputeThreadPoolP11parallelFor1n_ySi_ySi_S2itKXEtKF":{"name":"parallelFor(n:_:)","parent_name":"InlineComputeThreadPool"},"Structs/PosixThreadLocalStorage.html#/s:15PenguinParallel21RawThreadLocalStorageP3KeyQa":{"name":"Key","parent_name":"PosixThreadLocalStorage"},"Structs/PosixThreadLocalStorage.html#/s:15PenguinParallel21RawThreadLocalStorageP7makeKey0H0QzyFZ":{"name":"makeKey()","parent_name":"PosixThreadLocalStorage"},"Structs/PosixThreadLocalStorage.html#/s:15PenguinParallel21RawThreadLocalStorageP3get3forSvSg3KeyQz_tFZ":{"name":"get(for:)","parent_name":"PosixThreadLocalStorage"},"Structs/PosixThreadLocalStorage.html#/s:15PenguinParallel21RawThreadLocalStorageP3set5value3forySvSg_3KeyQztFZ":{"name":"set(value:for:)","parent_name":"PosixThreadLocalStorage"},"Structs/TypedThreadLocalStorage/Key.html#/s:15PenguinParallel23TypedThreadLocalStorageV3KeyV10localValueqd__Sgvp":{"name":"localValue","abstract":"<p>The thread-local value associated with <code>self</code>.</p>","parent_name":"Key"},"Structs/TypedThreadLocalStorage/Key.html":{"name":"Key","abstract":"<p>Token used to index into the thread local storage.</p>","parent_name":"TypedThreadLocalStorage"},"Structs/TypedThreadLocalStorage.html#/s:15PenguinParallel23TypedThreadLocalStorageV7makeKeyyAC0H0Vyx_qd__GXe_tcACyxGmAA03RawdeF0RzRld__Cr__lFZ":{"name":"makeKey(for:)","abstract":"<p>Allocates a key for type <code>T</code>.</p>","parent_name":"TypedThreadLocalStorage"},"Structs/TypedThreadLocalStorage.html#/s:15PenguinParallel23TypedThreadLocalStorageV3getyqd__SgAC3KeyVyx_qd__GRld__ClFZ":{"name":"get(_:)","abstract":"<p>Retrieves the thread-local value for <code>key</code>, if it exists.</p>","parent_name":"TypedThreadLocalStorage"},"Structs/TypedThreadLocalStorage.html#/s:15PenguinParallel23TypedThreadLocalStorageV3get_7defaultqd__AC3KeyVyx_qd__G_qd__yXKtRld__ClFZ":{"name":"get(_:default:)","abstract":"<p>Retrieves the thread-local value for <code>key</code>, creating it with <code>defaultValue</code> if it has not","parent_name":"TypedThreadLocalStorage"},"Structs/TypedThreadLocalStorage.html#/s:15PenguinParallel23TypedThreadLocalStorageV3set_3foryqd__Sg_AC3KeyVyx_qd__GtRld__ClFZ":{"name":"set(_:for:)","abstract":"<p>Stores <code>newValue</code> in thread-local storage using <code>key</code>.</p>","parent_name":"TypedThreadLocalStorage"},"Structs/TypedThreadLocalStorage.html":{"name":"TypedThreadLocalStorage","abstract":"<p>Wrapper around an underlying thread local storage abstraction to provide a"},"Structs/PosixThreadLocalStorage.html":{"name":"PosixThreadLocalStorage","abstract":"<p>Undocumented</p>"},"Structs/InlineComputeThreadPool.html":{"name":"InlineComputeThreadPool","abstract":"<p>A <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/ComputeThreadPool.html\">ComputeThreadPool</a></code> that executes everything immediately on the current thread.</p>"},"Protocols/ComputeThreadPool.html#/s:15PenguinParallel17ComputeThreadPoolP8dispatchyyyycF":{"name":"dispatch(_:)","abstract":"<p>Schedules <code>fn</code> to be executed in the threadpool eventually.</p>","parent_name":"ComputeThreadPool"},"Protocols/ComputeThreadPool.html#/s:15PenguinParallel17ComputeThreadPoolP4joinyyyyXE_yyXEtF":{"name":"join(_:_:)","abstract":"<p>Executes <code>a</code> and <code>b</code> optionally in parallel; both are guaranteed to have finished executing","parent_name":"ComputeThreadPool"},"Protocols/ComputeThreadPool.html#/s:15PenguinParallel17ComputeThreadPoolP4joinyyyyKXE_yyKXEtKF":{"name":"join(_:_:)","abstract":"<p>Executes <code>a</code> and <code>b</code> optionally in parallel; if one throws, it is unspecified whether the","parent_name":"ComputeThreadPool"},"Protocols/ComputeThreadPool.html#/s:15PenguinParallel17ComputeThreadPoolP0B7ForBodya":{"name":"ParallelForBody","abstract":"<p>A function to be invoked in parallel a specified number of times by <code>parallelFor</code>.</p>","parent_name":"ComputeThreadPool"},"Protocols/ComputeThreadPool.html#/s:15PenguinParallel17ComputeThreadPoolP08ThrowingB7ForBodya":{"name":"ThrowingParallelForBody","abstract":"<p>A function that can be executed in parallel.</p>","parent_name":"ComputeThreadPool"},"Protocols/ComputeThreadPool.html#/s:15PenguinParallel17ComputeThreadPoolP010VectorizedB7ForBodya":{"name":"VectorizedParallelForBody","abstract":"<p>A vectorized function that can be executed in parallel.</p>","parent_name":"ComputeThreadPool"},"Protocols/ComputeThreadPool.html#/s:15PenguinParallel17ComputeThreadPoolP018ThrowingVectorizedB7ForBodya":{"name":"ThrowingVectorizedParallelForBody","abstract":"<p>A vectorized function that can be executed in parallel.</p>","parent_name":"ComputeThreadPool"},"Protocols/ComputeThreadPool.html#/s:15PenguinParallel17ComputeThreadPoolP11parallelFor1n_ySi_ySi_SitXEtF":{"name":"parallelFor(n:_:)","abstract":"<p>Returns after executing <code>fn</code> <code>n</code> times.</p>","parent_name":"ComputeThreadPool"},"Protocols/ComputeThreadPool.html#/s:15PenguinParallel17ComputeThreadPoolP11parallelFor1n_ySi_ySi_S2itXEtF":{"name":"parallelFor(n:_:)","abstract":"<p>Returns after executing <code>fn</code> an unspecified number of times, guaranteeing that <code>fn</code> has been","parent_name":"ComputeThreadPool"},"Protocols/ComputeThreadPool.html#/s:15PenguinParallel17ComputeThreadPoolP11parallelFor1n_ySi_ySi_SitKXEtKF":{"name":"parallelFor(n:_:)","abstract":"<p>Returns after executing <code>fn</code> <code>n</code> times.</p>","parent_name":"ComputeThreadPool"},"Protocols/ComputeThreadPool.html#/s:15PenguinParallel17ComputeThreadPoolP11parallelFor1n_ySi_ySi_S2itKXEtKF":{"name":"parallelFor(n:_:)","abstract":"<p>Returns after executing <code>fn</code> an unspecified number of times, guaranteeing that <code>fn</code> has been","parent_name":"ComputeThreadPool"},"Protocols/ComputeThreadPool.html#/s:15PenguinParallel17ComputeThreadPoolP14maxParallelismSivp":{"name":"maxParallelism","abstract":"<p>The maximum number of concurrent threads of execution supported by this thread pool.</p>","parent_name":"ComputeThreadPool"},"Protocols/ComputeThreadPool.html#/s:15PenguinParallel17ComputeThreadPoolP07currentD5IndexSiSgvp":{"name":"currentThreadIndex","abstract":"<p>Returns the index of the current thread in the pool, if running on a thread-pool thread,","parent_name":"ComputeThreadPool"},"Protocols/RawThreadLocalStorage.html#/s:15PenguinParallel21RawThreadLocalStorageP3KeyQa":{"name":"Key","abstract":"<p>The key type used to index into the thread local storage.</p>","parent_name":"RawThreadLocalStorage"},"Protocols/RawThreadLocalStorage.html#/s:15PenguinParallel21RawThreadLocalStorageP7makeKey0H0QzyFZ":{"name":"makeKey()","abstract":"<p>Makes a new key; the returned key should be used for the entire process lifetime.</p>","parent_name":"RawThreadLocalStorage"},"Protocols/RawThreadLocalStorage.html#/s:15PenguinParallel21RawThreadLocalStorageP3get3forSvSg3KeyQz_tFZ":{"name":"get(for:)","abstract":"<p>Retrieves the raw pointer associated with the given key.</p>","parent_name":"RawThreadLocalStorage"},"Protocols/RawThreadLocalStorage.html#/s:15PenguinParallel21RawThreadLocalStorageP3set5value3forySvSg_3KeyQztFZ":{"name":"set(value:for:)","abstract":"<p>Sets the raw pointer associated with the given key.</p>","parent_name":"RawThreadLocalStorage"},"Protocols/ConditionVariableProtocol.html#/s:15PenguinParallel25ConditionVariableProtocolP5MutexQa":{"name":"Mutex","abstract":"<p>The mutex type associated with this condition variable.</p>","parent_name":"ConditionVariableProtocol"},"Protocols/ConditionVariableProtocol.html#/s:15PenguinParallel25ConditionVariableProtocolPxycfc":{"name":"init()","abstract":"<p>Initializes <code>self</code>.</p>","parent_name":"ConditionVariableProtocol"},"Protocols/ConditionVariableProtocol.html#/s:15PenguinParallel25ConditionVariableProtocolP4waityy5MutexQzF":{"name":"wait(_:)","abstract":"<p>Wait until signaled, releasing <code>lock</code> while waiting.</p>","parent_name":"ConditionVariableProtocol"},"Protocols/ConditionVariableProtocol.html#/s:15PenguinParallel25ConditionVariableProtocolP6signalyyF":{"name":"signal()","abstract":"<p>Wake up one waiter.</p>","parent_name":"ConditionVariableProtocol"},"Protocols/ConditionVariableProtocol.html#/s:15PenguinParallel25ConditionVariableProtocolP9broadcastyyF":{"name":"broadcast()","abstract":"<p>Wake up all waiters.</p>","parent_name":"ConditionVariableProtocol"},"Protocols/ConditionMutexProtocol.html#/s:15PenguinParallel22ConditionMutexProtocolP8lockWhenyySbyXEF":{"name":"lockWhen(_:)","abstract":"<p>Locks <code>self</code> when <code>predicate</code> returns true.</p>","parent_name":"ConditionMutexProtocol"},"Protocols/ConditionMutexProtocol.html#/s:15PenguinParallel22ConditionMutexProtocolP8lockWhenyqd__SbyXE_qd__yKXEtKlF":{"name":"lockWhen(_:_:)","abstract":"<p>Undocumented</p>","parent_name":"ConditionMutexProtocol"},"Protocols/ConditionMutexProtocol.html#/s:15PenguinParallel22ConditionMutexProtocolP5awaityySbyXEF":{"name":"await(_:)","abstract":"<p>Unlocks <code>self</code> until <code>predicate</code> returns <code>true</code>.</p>","parent_name":"ConditionMutexProtocol"},"Protocols/MutexProtocol.html#/s:15PenguinParallel13MutexProtocolPxycfc":{"name":"init()","abstract":"<p>Initializes the lock in the unlocked state.</p>","parent_name":"MutexProtocol"},"Protocols/MutexProtocol.html#/s:15PenguinParallel13MutexProtocolP4lockyyF":{"name":"lock()","abstract":"<p>Locks the lock</p>","parent_name":"MutexProtocol"},"Protocols/MutexProtocol.html#/s:15PenguinParallel13MutexProtocolP6unlockyyF":{"name":"unlock()","abstract":"<p>Unlocks the lock.</p>","parent_name":"MutexProtocol"},"Protocols/MutexProtocol.html#/s:15PenguinParallel13MutexProtocolPAAE8withLockyqd__qd__yKXEKlF":{"name":"withLock(_:)","abstract":"<p>Runs <code>fn</code> while holding <code>self</code>&lsquo;s lock.</p>","parent_name":"MutexProtocol"},"Protocols/ThreadProtocol.html#/s:15PenguinParallel14ThreadProtocolP4joinyyF":{"name":"join()","abstract":"<p>Blocks until the thread has finished executing.</p>","parent_name":"ThreadProtocol"},"Protocols/ConcurrencyPlatform.html#/s:15PenguinParallel19ConcurrencyPlatformP5MutexQa":{"name":"Mutex","abstract":"<p>The type of mutexes (aka locks) used.</p>","parent_name":"ConcurrencyPlatform"},"Protocols/ConcurrencyPlatform.html#/s:15PenguinParallel19ConcurrencyPlatformP14ConditionMutexQa":{"name":"ConditionMutex","abstract":"<p>The type of conditional mutexes that are available.</p>","parent_name":"ConcurrencyPlatform"},"Protocols/ConcurrencyPlatform.html#/s:15PenguinParallel19ConcurrencyPlatformP17ConditionVariableQa":{"name":"ConditionVariable","abstract":"<p>The type of the condition variable that&rsquo;s available.</p>","parent_name":"ConcurrencyPlatform"},"Protocols/ConcurrencyPlatform.html#/s:15PenguinParallel19ConcurrencyPlatformP6ThreadQa":{"name":"Thread","abstract":"<p>The type of threads that are used.</p>","parent_name":"ConcurrencyPlatform"},"Protocols/ConcurrencyPlatform.html#/s:15PenguinParallel19ConcurrencyPlatformP22BaseThreadLocalStorageQa":{"name":"BaseThreadLocalStorage","abstract":"<p>The thread local storage.</p>","parent_name":"ConcurrencyPlatform"},"Protocols/ConcurrencyPlatform.html#/s:15PenguinParallel19ConcurrencyPlatformP18ThreadLocalStoragea":{"name":"ThreadLocalStorage","abstract":"<p>A convenient type to manage thread local storage.</p>","parent_name":"ConcurrencyPlatform"},"Protocols/ConcurrencyPlatform.html#/s:15PenguinParallel19ConcurrencyPlatformP10makeThread4name_0F0QzSS_yyctF":{"name":"makeThread(name:_:)","abstract":"<p>Makes a thread.</p>","parent_name":"ConcurrencyPlatform"},"Protocols/ConcurrencyPlatform.html":{"name":"ConcurrencyPlatform","abstract":"<p>Abstracts over different concurrency abstractions.</p>"},"Protocols/ThreadProtocol.html":{"name":"ThreadProtocol","abstract":"<p>Represents a thread of execution.</p>"},"Protocols/MutexProtocol.html":{"name":"MutexProtocol","abstract":"<p>Mutual exclusion locks.</p>"},"Protocols/ConditionMutexProtocol.html":{"name":"ConditionMutexProtocol","abstract":"<p>Allows for waiting until a given condition is satisifed.</p>"},"Protocols/ConditionVariableProtocol.html":{"name":"ConditionVariableProtocol","abstract":"<p>A condition variable.</p>"},"Protocols/RawThreadLocalStorage.html":{"name":"RawThreadLocalStorage","abstract":"<p>Abstracts over thread local storage.</p>"},"Protocols/ComputeThreadPool.html":{"name":"ComputeThreadPool","abstract":"<p>Allows efficient use of multi-core CPUs by managing a fixed-size collection of threads.</p>"},"Enums/ComputeThreadPools.html#/s:15PenguinParallel18ComputeThreadPoolsO6globalAA0cD4Pool_pvpZ":{"name":"global","abstract":"<p>A global default <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/ComputeThreadPool.html\">ComputeThreadPool</a></code>.</p>","parent_name":"ComputeThreadPools"},"Enums/ComputeThreadPools.html#/s:15PenguinParallel18ComputeThreadPoolsO5localAA0cD4Pool_pvpZ":{"name":"local","abstract":"<p>A thread local <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/ComputeThreadPool.html\">ComputeThreadPool</a></code>.</p>","parent_name":"ComputeThreadPools"},"Enums/ComputeThreadPools.html#/s:15PenguinParallel18ComputeThreadPoolsO07currentD5IndexSiSgvpZ":{"name":"currentThreadIndex","abstract":"<p>The thread index for the current thread, based on the current thread-local compute pool.</p>","parent_name":"ComputeThreadPools"},"Enums/ComputeThreadPools.html#/s:15PenguinParallel18ComputeThreadPoolsO14maxParallelismSivpZ":{"name":"maxParallelism","abstract":"<p>The amount of parallelism provided by the current thread-local compute pool.</p>","parent_name":"ComputeThreadPools"},"Enums/ComputeThreadPools.html#/s:15PenguinParallel18ComputeThreadPoolsO8withPoolyxAA0cdG0_p_xyKXEtKlFZ":{"name":"withPool(_:_:)","abstract":"<p>Sets <code>pool</code> to <code><a href=\"36f8f5912051ae747ef441d6511ca4cbEnums/ComputeThreadPools.html#/s:15PenguinParallel18ComputeThreadPoolsO5localAA0cD4Pool_pvpZ\">local</a></code> for the duration of <code>body</code>.</p>","parent_name":"ComputeThreadPools"},"Enums/ComputeThreadPools.html":{"name":"ComputeThreadPools","abstract":"<p>A namespace for threadpool operations.</p>"},"Classes/NonblockingCondition.html#/s:15PenguinParallel20NonblockingConditionC11threadCountACyxGSi_tcfc":{"name":"init(threadCount:)","abstract":"<p>Initializes NonblockingCondition for use by up to <code>threadCount</code> waiters.</p>","parent_name":"NonblockingCondition"},"Classes/NonblockingCondition.html#/s:15PenguinParallel20NonblockingConditionC6notify3allySb_tF":{"name":"notify(all:)","abstract":"<p>Wakes up waiters.</p>","parent_name":"NonblockingCondition"},"Classes/NonblockingCondition.html#/s:15PenguinParallel20NonblockingConditionC7preWaityyF":{"name":"preWait()","abstract":"<p>Signals an intent to wait.</p>","parent_name":"NonblockingCondition"},"Classes/NonblockingCondition.html#/s:15PenguinParallel20NonblockingConditionC10cancelWaityyF":{"name":"cancelWait()","abstract":"<p>Cancels an intent to wait (i.e. the awaited condition occurred.)</p>","parent_name":"NonblockingCondition"},"Classes/NonblockingCondition.html#/s:15PenguinParallel20NonblockingConditionC10commitWaityySiF":{"name":"commitWait(_:)","abstract":"<p>Puts the current thread to sleep until a notification occurs.</p>","parent_name":"NonblockingCondition"},"Classes/NonblockingCondition.html#/s:s28CustomDebugStringConvertibleP16debugDescriptionSSvp":{"name":"debugDescription","parent_name":"NonblockingCondition"},"Classes/NonBlockingThreadPool.html#/s:15PenguinParallel21NonBlockingThreadPoolC4Taska":{"name":"Task","abstract":"<p>Undocumented</p>","parent_name":"NonBlockingThreadPool"},"Classes/NonBlockingThreadPool.html#/s:15PenguinParallel21NonBlockingThreadPoolC12ThrowingTaska":{"name":"ThrowingTask","abstract":"<p>Undocumented</p>","parent_name":"NonBlockingThreadPool"},"Classes/NonBlockingThreadPool.html#/s:15PenguinParallel21NonBlockingThreadPoolC4name11threadCount11environment016externalFastPatheI005allowclM7ThreadsACyxGSS_SixSiSbtcfc":{"name":"init(name:threadCount:environment:externalFastPathThreadCount:allowNonFastPathThreads:)","abstract":"<p>Initialize a new thread pool with <code>threadCount</code> threads using threading environment","parent_name":"NonBlockingThreadPool"},"Classes/NonBlockingThreadPool.html#/s:15PenguinParallel21NonBlockingThreadPoolC015registerCurrentE0yyF":{"name":"registerCurrentThread()","abstract":"<p>Registers the current thread with the thread pool for fast-path operation.</p>","parent_name":"NonBlockingThreadPool"},"Classes/NonBlockingThreadPool.html#/s:15PenguinParallel17ComputeThreadPoolP8dispatchyyyycF":{"name":"dispatch(_:)","parent_name":"NonBlockingThreadPool"},"Classes/NonBlockingThreadPool.html#/s:15PenguinParallel17ComputeThreadPoolP4joinyyyyXE_yyXEtF":{"name":"join(_:_:)","parent_name":"NonBlockingThreadPool"},"Classes/NonBlockingThreadPool.html#/s:15PenguinParallel17ComputeThreadPoolP4joinyyyyKXE_yyKXEtKF":{"name":"join(_:_:)","parent_name":"NonBlockingThreadPool"},"Classes/NonBlockingThreadPool.html#/s:15PenguinParallel21NonBlockingThreadPoolC11parallelFor1n_ySi_ySi_S2itXEtF":{"name":"parallelFor(n:_:)","abstract":"<p>Executes <code>fn</code>, optionally in parallel, spanning the range <code>0..&lt;n</code>.</p>","parent_name":"NonBlockingThreadPool"},"Classes/NonBlockingThreadPool.html#/s:15PenguinParallel21NonBlockingThreadPoolC11parallelFor1n_ySi_ySi_S2itKXEtKF":{"name":"parallelFor(n:_:)","abstract":"<p>Executes <code>fn</code>, optionally in parallel, spanning the range <code>0..&lt;n</code>.</p>","parent_name":"NonBlockingThreadPool"},"Classes/NonBlockingThreadPool.html#/s:15PenguinParallel21NonBlockingThreadPoolC8shutDownyyF":{"name":"shutDown()","abstract":"<p>Requests that all threads in the threadpool exit and cleans up their associated resources.</p>","parent_name":"NonBlockingThreadPool"},"Classes/NonBlockingThreadPool.html#/s:15PenguinParallel17ComputeThreadPoolP14maxParallelismSivp":{"name":"maxParallelism","parent_name":"NonBlockingThreadPool"},"Classes/NonBlockingThreadPool.html#/s:15PenguinParallel17ComputeThreadPoolP07currentD5IndexSiSgvp":{"name":"currentThreadIndex","parent_name":"NonBlockingThreadPool"},"Classes/NonBlockingThreadPool.html#/s:15PenguinParallel21NonBlockingThreadPoolC4name11threadCountACyxGSS_Sitcfc":{"name":"init(name:threadCount:)","abstract":"<p>Creates <code>self</code> using a default-initialized <code>Environment</code>, and the specified <code>name</code> and","parent_name":"NonBlockingThreadPool"},"Classes/NonBlockingThreadPool.html":{"name":"NonBlockingThreadPool","abstract":"<p>An efficient, work-stealing, general purpose compute thread pool.</p>"},"Classes/NonblockingCondition.html":{"name":"NonblockingCondition","abstract":"<p>Allows to wait for arbitrary predicates in non-blocking algorithms.</p>"},"Extensions/Array.html#/s:Sa15PenguinParallelE4pMapySayqd__Gqd__xXElF":{"name":"pMap(_:)","abstract":"<p>Makes a new array, where every element in the new array is <code>f(self[i])</code> for all <code>i</code> in <code>0..&lt;count</code>.</p>","parent_name":"Array"},"Extensions/Array.html#/s:Sa15PenguinParallelSjRzlE4pSumxyF":{"name":"pSum()","abstract":"<p>Computes the sum of all the elements in parallel.</p>","parent_name":"Array"},"Extensions/Array.html":{"name":"Array"},"Parallel.html":{"name":"Parallel"},"Other%20Classes.html":{"name":"Other Classes","abstract":"<p>The following classes are available globally.</p>"},"Other%20Enums.html":{"name":"Other Enumerations","abstract":"<p>The following enumerations are available globally.</p>"},"Other%20Protocols.html":{"name":"Other Protocols","abstract":"<p>The following protocols are available globally.</p>"},"Other%20Structs.html":{"name":"Other Structures","abstract":"<p>The following structures are available globally.</p>"}}